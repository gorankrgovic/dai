name: release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    name: build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { goos: linux,   goarch: amd64, runner: ubuntu-latest,  ext: ""    }
          - { goos: linux,   goarch: arm64, runner: ubuntu-latest,  ext: ""    }
          - { goos: darwin,  goarch: amd64, runner: macos-latest,   ext: ""    }
          - { goos: darwin,  goarch: arm64, runner: macos-latest,   ext: ""    }
          - { goos: windows, goarch: amd64, runner: windows-latest, ext: ".exe"}
          - { goos: windows, goarch: arm64, runner: windows-latest, ext: ".exe"}

    env:
      CGO_ENABLED: "0"
      VERSION: ${{ github.ref_name }}
      COMMIT: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Set build date
        id: meta
        run: echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build
        run: |
          mkdir -p dist
          OUT="dai${{ matrix.ext }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -trimpath -ldflags "-s -w \
            -X github.com/gorankrgovic/dai/internal/buildinfo.Version=${VERSION} \
            -X github.com/gorankrgovic/dai/internal/buildinfo.Commit=${COMMIT} \
            -X github.com/gorankrgovic/dai/internal/buildinfo.Date=${{ steps.meta.outputs.DATE }}" \
            -o "${OUT}" ./
          DIR="dai_${VERSION}_${{ matrix.goos }}-${{ matrix.goarch }}"
          mkdir -p "dist/${DIR}"
          mv "${OUT}" "dist/${DIR}/"
          echo "DAI ${VERSION} (${{ matrix.goos }}-${{ matrix.goarch }})" > "dist/${DIR}/README.txt"
        shell: bash

      - name: Archive
        run: |
          cd dist
          DIR="dai_${VERSION}_${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            7z a "${DIR}.zip" "${DIR}" > /dev/null
          else
            tar -C . -czf "${DIR}.tar.gz" "${DIR}"
          fi
        shell: bash

      - name: Checksums
        run: |
          cd dist
          if ls dai_${VERSION}_${{ matrix.goos }}-${{ matrix.goarch }}.* >/dev/null 2>&1; then
            for f in dai_${VERSION}_${{ matrix.goos }}-${{ matrix.goarch }}.*; do
              if command -v shasum >/dev/null 2>&1; then
                shasum -a 256 "$f" | awk '{print $1 "  " FILENAME}' FILENAME="$f" >> checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt
              else
                sha256sum "$f" >> checksums-${{ matrix.goos }}-${{ matrix.goarch }}.txt
              fi
            done
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dai_${{ env.VERSION }}_${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/dai_${{ env.VERSION }}_${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            dist/dai_${{ env.VERSION }}_${{ matrix.goos }}-${{ matrix.goarch }}.zip
            dist/checksums-*.txt
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true    # <<< sve fajlove spusti direktno u dist/

      - name: Gather files
        run: |
          set -euo pipefail
          mkdir -p upload
          shopt -s nullglob

          # kopiraj sve archive fajlove
          cp dist/dai_v*.tar.gz upload/ || true
          cp dist/dai_v*.zip    upload/ || true

          # spoji checksums iz svih matrica
          cat dist/checksums-*.txt > upload/checksums.txt

          # napravi alias fajlove bez verzije (za /releases/latest/download/)
          VERSION="${GITHUB_REF_NAME#v}"
          for f in upload/dai_v${VERSION}_*; do
            base="$(basename "$f")"
            alias="upload/${base/dai_v${VERSION}_/dai_}"
            cp -f "$f" "$alias"
          done

      - name: (debug) list collected files
        run: ls -la upload

      # PRIVATNI REPO (ostavi ako želiš dupli release)
      - name: Create Release (private repo)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            upload/dai_v*.tar.gz
            upload/dai_v*.zip
            upload/checksums.txt
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true

      # OBJAVI u PUBLIC repo gorankrgovic/dai-releases
      - name: Create Release (public dai-releases)
        uses: softprops/action-gh-release@v2
        with:
          repository: gorankrgovic/dai-releases
          files: upload/*
          tag_name: ${{ github.ref_name }}   # npr. v0.2.4
          target_commitish: main             # target branch u PUBLIC repou
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}  # obavezno: PAT sa Contents: Read&Write